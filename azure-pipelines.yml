trigger:
- main  # Set the branch(es) to trigger the pipeline

pool:
  vmImage: 'windows-latest'  # Use an agent that supports .NET

variables:
  SONAR_PROJECT_KEY: 'abhishekjob_simaira.digital.api.integration'
  SONAR_ORG_KEY: 'abhishekjob'  # Required only for SonarCloud
  SONAR_URL: 'https://sonarcloud.io'       # Or your SonarQube server URL
  SONAR_TOKEN: $(fcd8ae3cc9a8181eca5ea1b81973570c3bf7a66e)           # Store the token in a secure DevOps variable

steps:
# 1. Install dotnet-sonarscanner if not pre-installed
- task: UseDotNet@2
  inputs:
    packageType: 'global'
    version: '7.x'
  displayName: 'Install dotnet-sonarscanner'

# 2. Prepare the SonarQube analysis
- script: |
    dotnet tool install --global dotnet-sonarscanner
    dotnet sonarscanner begin /k:"$(SONAR_PROJECT_KEY)" /d:sonar.host.url="$(SONAR_URL)" /d:sonar.login="$(SONAR_TOKEN)" /o:"$(SONAR_ORG_KEY)"
  displayName: 'Run SonarScanner Begin'

# 3. Build the project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
  displayName: 'Build the project'

# 4. Complete the SonarQube analysis
- script: |
    dotnet sonarscanner end /d:sonar.login="$(SONAR_TOKEN)"
  displayName: 'Run SonarScanner End'

# 5. Publish SonarQube/SonarCloud results
# Publish Quality Gate Result task
- task: SonarCloudPublish@3
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Analysis Results'
